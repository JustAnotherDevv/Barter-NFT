/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace NFTBarteringPlatform {
  export type NFTItemStruct = {
    nftContract: AddressLike;
    tokenId: BigNumberish;
  };

  export type NFTItemStructOutput = [nftContract: string, tokenId: bigint] & {
    nftContract: string;
    tokenId: bigint;
  };
}

export interface NFTBarteringPlatformInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptTrade"
      | "cancelTrade"
      | "counterOffers"
      | "createCounterOffer"
      | "depositNFTs"
      | "feePerNFT"
      | "getTrade"
      | "getUserActiveTrades"
      | "nextTradeId"
      | "nftInEscrow"
      | "onERC721Received"
      | "owner"
      | "platformFeePercentage"
      | "proposeTrade"
      | "renounceOwnership"
      | "totalFeesCollected"
      | "trades"
      | "transferOwnership"
      | "updateFeePerNFT"
      | "userActiveTrades"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CounterOfferMade"
      | "FeeUpdated"
      | "FeesWithdrawn"
      | "NFTsDeposited"
      | "OwnershipTransferred"
      | "TradeAccepted"
      | "TradeCancelled"
      | "TradeExecuted"
      | "TradeProposed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "counterOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCounterOffer",
    values: [
      BigNumberish,
      NFTBarteringPlatform.NFTItemStruct[],
      NFTBarteringPlatform.NFTItemStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feePerNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveTrades",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTradeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftInEscrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTrade",
    values: [
      AddressLike,
      NFTBarteringPlatform.NFTItemStruct[],
      NFTBarteringPlatform.NFTItemStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trades",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePerNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userActiveTrades",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "counterOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCounterOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePerNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTradeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftInEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePerNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userActiveTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace CounterOfferMadeEvent {
  export type InputTuple = [
    originalTradeId: BigNumberish,
    counterTradeId: BigNumberish,
    counterOfferer: AddressLike
  ];
  export type OutputTuple = [
    originalTradeId: bigint,
    counterTradeId: bigint,
    counterOfferer: string
  ];
  export interface OutputObject {
    originalTradeId: bigint;
    counterTradeId: bigint;
    counterOfferer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTsDepositedEvent {
  export type InputTuple = [
    tradeId: BigNumberish,
    depositor: AddressLike,
    nftCount: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: bigint,
    depositor: string,
    nftCount: bigint
  ];
  export interface OutputObject {
    tradeId: bigint;
    depositor: string;
    nftCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeAcceptedEvent {
  export type InputTuple = [tradeId: BigNumberish, recipient: AddressLike];
  export type OutputTuple = [tradeId: bigint, recipient: string];
  export interface OutputObject {
    tradeId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCancelledEvent {
  export type InputTuple = [tradeId: BigNumberish, canceller: AddressLike];
  export type OutputTuple = [tradeId: bigint, canceller: string];
  export interface OutputObject {
    tradeId: bigint;
    canceller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    tradeId: BigNumberish,
    proposer: AddressLike,
    recipient: AddressLike,
    totalNFTsTraded: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: bigint,
    proposer: string,
    recipient: string,
    totalNFTsTraded: bigint
  ];
  export interface OutputObject {
    tradeId: bigint;
    proposer: string;
    recipient: string;
    totalNFTsTraded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeProposedEvent {
  export type InputTuple = [
    tradeId: BigNumberish,
    proposer: AddressLike,
    recipient: AddressLike,
    offeredCount: BigNumberish,
    requestedCount: BigNumberish,
    expirationTime: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: bigint,
    proposer: string,
    recipient: string,
    offeredCount: bigint,
    requestedCount: bigint,
    expirationTime: bigint
  ];
  export interface OutputObject {
    tradeId: bigint;
    proposer: string;
    recipient: string;
    offeredCount: bigint;
    requestedCount: bigint;
    expirationTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTBarteringPlatform extends BaseContract {
  connect(runner?: ContractRunner | null): NFTBarteringPlatform;
  waitForDeployment(): Promise<this>;

  interface: NFTBarteringPlatformInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptTrade: TypedContractMethod<
    [_tradeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelTrade: TypedContractMethod<
    [_tradeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  counterOffers: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  createCounterOffer: TypedContractMethod<
    [
      _originalTradeId: BigNumberish,
      _offeredNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _requestedNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _expirationTime: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  depositNFTs: TypedContractMethod<
    [_tradeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  feePerNFT: TypedContractMethod<[], [bigint], "view">;

  getTrade: TypedContractMethod<
    [_tradeId: BigNumberish],
    [
      [
        string,
        string,
        NFTBarteringPlatform.NFTItemStructOutput[],
        NFTBarteringPlatform.NFTItemStructOutput[],
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        proposer: string;
        recipient: string;
        offeredNFTs: NFTBarteringPlatform.NFTItemStructOutput[];
        requestedNFTs: NFTBarteringPlatform.NFTItemStructOutput[];
        expirationTime: bigint;
        status: bigint;
        proposerDeposited: boolean;
        recipientDeposited: boolean;
      }
    ],
    "view"
  >;

  getUserActiveTrades: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  nextTradeId: TypedContractMethod<[], [bigint], "view">;

  nftInEscrow: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeePercentage: TypedContractMethod<[], [bigint], "view">;

  proposeTrade: TypedContractMethod<
    [
      _recipient: AddressLike,
      _offeredNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _requestedNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _expirationTime: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalFeesCollected: TypedContractMethod<[], [bigint], "view">;

  trades: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean] & {
        proposer: string;
        recipient: string;
        expirationTime: bigint;
        status: bigint;
        proposerDeposited: boolean;
        recipientDeposited: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeePerNFT: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  userActiveTrades: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptTrade"
  ): TypedContractMethod<[_tradeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelTrade"
  ): TypedContractMethod<[_tradeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "counterOffers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCounterOffer"
  ): TypedContractMethod<
    [
      _originalTradeId: BigNumberish,
      _offeredNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _requestedNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _expirationTime: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositNFTs"
  ): TypedContractMethod<[_tradeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feePerNFT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrade"
  ): TypedContractMethod<
    [_tradeId: BigNumberish],
    [
      [
        string,
        string,
        NFTBarteringPlatform.NFTItemStructOutput[],
        NFTBarteringPlatform.NFTItemStructOutput[],
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        proposer: string;
        recipient: string;
        offeredNFTs: NFTBarteringPlatform.NFTItemStructOutput[];
        requestedNFTs: NFTBarteringPlatform.NFTItemStructOutput[];
        expirationTime: bigint;
        status: bigint;
        proposerDeposited: boolean;
        recipientDeposited: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserActiveTrades"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "nextTradeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftInEscrow"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeTrade"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _offeredNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _requestedNFTs: NFTBarteringPlatform.NFTItemStruct[],
      _expirationTime: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalFeesCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trades"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean] & {
        proposer: string;
        recipient: string;
        expirationTime: bigint;
        status: bigint;
        proposerDeposited: boolean;
        recipientDeposited: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeePerNFT"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userActiveTrades"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CounterOfferMade"
  ): TypedContractEvent<
    CounterOfferMadeEvent.InputTuple,
    CounterOfferMadeEvent.OutputTuple,
    CounterOfferMadeEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "NFTsDeposited"
  ): TypedContractEvent<
    NFTsDepositedEvent.InputTuple,
    NFTsDepositedEvent.OutputTuple,
    NFTsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TradeAccepted"
  ): TypedContractEvent<
    TradeAcceptedEvent.InputTuple,
    TradeAcceptedEvent.OutputTuple,
    TradeAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "TradeCancelled"
  ): TypedContractEvent<
    TradeCancelledEvent.InputTuple,
    TradeCancelledEvent.OutputTuple,
    TradeCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TradeProposed"
  ): TypedContractEvent<
    TradeProposedEvent.InputTuple,
    TradeProposedEvent.OutputTuple,
    TradeProposedEvent.OutputObject
  >;

  filters: {
    "CounterOfferMade(uint256,uint256,address)": TypedContractEvent<
      CounterOfferMadeEvent.InputTuple,
      CounterOfferMadeEvent.OutputTuple,
      CounterOfferMadeEvent.OutputObject
    >;
    CounterOfferMade: TypedContractEvent<
      CounterOfferMadeEvent.InputTuple,
      CounterOfferMadeEvent.OutputTuple,
      CounterOfferMadeEvent.OutputObject
    >;

    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "NFTsDeposited(uint256,address,uint256)": TypedContractEvent<
      NFTsDepositedEvent.InputTuple,
      NFTsDepositedEvent.OutputTuple,
      NFTsDepositedEvent.OutputObject
    >;
    NFTsDeposited: TypedContractEvent<
      NFTsDepositedEvent.InputTuple,
      NFTsDepositedEvent.OutputTuple,
      NFTsDepositedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TradeAccepted(uint256,address)": TypedContractEvent<
      TradeAcceptedEvent.InputTuple,
      TradeAcceptedEvent.OutputTuple,
      TradeAcceptedEvent.OutputObject
    >;
    TradeAccepted: TypedContractEvent<
      TradeAcceptedEvent.InputTuple,
      TradeAcceptedEvent.OutputTuple,
      TradeAcceptedEvent.OutputObject
    >;

    "TradeCancelled(uint256,address)": TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;
    TradeCancelled: TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;

    "TradeExecuted(uint256,address,address,uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;

    "TradeProposed(uint256,address,address,uint256,uint256,uint256)": TypedContractEvent<
      TradeProposedEvent.InputTuple,
      TradeProposedEvent.OutputTuple,
      TradeProposedEvent.OutputObject
    >;
    TradeProposed: TypedContractEvent<
      TradeProposedEvent.InputTuple,
      TradeProposedEvent.OutputTuple,
      TradeProposedEvent.OutputObject
    >;
  };
}
